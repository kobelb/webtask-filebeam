'use strict';
var gulp     = require('gulp');
var fs       = require('fs');
var nodemon  = require('nodemon');
var run      = require('gulp-run');
var webpack  = require('webpack');
var Sandbox  = require('sandboxjs');
var Promise  = require('bluebird');
var readFile = Promise.promisify(fs.readFile);
var colors   = require('colors/safe');

const includedNodeModules = ['url-join'];

// We need to exclude node_modules, otherwise webpack will bundle them
var nodeModules = {};
fs.readdirSync('node_modules')
  .filter(function(x) {
    return [...includedNodeModules, '.bin'].indexOf(x) === -1;
  })
  .forEach(function(mod) {
    nodeModules[mod] = 'commonjs ' + mod;
  })
;

// This helper function creates the configuration object that is sent to webpack
// for triggering local and webtask builds
function buildWebpackConfig(config) {
  var webpackConfig = {
    entry:       [
      config.entry
    ],
    target:      'node',
    output:      {
      path:     config.outputFolder,
      filename: config.output
    },
    node:        {
      __dirname:  true,
      __filename: true
    },
    externals:   config.externals,
    plugins:     [new webpack.IgnorePlugin(/\.(css|less)$/)]
  };

  // This adds source-map-support in orded to enable debugging ES6 files
  if (config.sourceMap) {
    webpackConfig.devtool = 'source-map'
    webpackConfig.debug   = true;
    webpackConfig.plugins.push(new webpack.BannerPlugin('require("source-map-support").install();', {raw: true, entryOnly: false}));
  }

  // This hack is used for exporting the entry point module of the file generated by webpack
  if (config.addModuleExports) {
    webpackConfig.plugins.push(new webpack.BannerPlugin('module.exports = ', {raw: true, entryOnly: false}));
  }

  return webpackConfig;
}

// This is the reporter used for the webpack build
function onBuild(done) {
  return function(err, stats) {
    if (err) {
      console.log('Error', err);
    } else {
      console.log(stats.toString());
    }

    if (done) done();
  }
}

// This task builds the webtask script containg the entire api in a single file
gulp.task('buildWebtask', function (done) {
  webpack(buildWebpackConfig({
    entry:            './src/webtask.js',
    output:           'webtask.js',
    outputFolder:     'build',
    externals:        nodeModules,
    addModuleExports: true
  })).run(onBuild(done));
});

